#!/bin/bash

#######################################
# Usage string for the program.
# Globals:
#   PROGRAM_NAME
# Outputs:
#   - usage heredoc string to stdout
#######################################
usage () {
	cat << _EOF_
Usage: $PROGRAM_NAME [-h] [-o OUTPUT_CONF]

Options:
	-o	output a packerbuild configuration based on jenkins env

_EOF_
}

#######################################
# Output's a packerbuild configuration. Should
# note that a packerbuild configuration is of my own construct
# that separates provisioners, packer build templates,
# and OS configuration file (e.g. preseed, kickstart file).
# Globals:
#	PROGRAM_NAME
#	OUTPUT_CONF
#   ISO_FILE
#   PACKER_BUILDER
#	UBUNTU
#	DEBIAN
#	OS_BUILD_CONF_NAME
#	SHELL_PROVISIONER_NAME
#	PACKER_BUILD_TEMPLATE_NAME
#	PACKER_BUILD_EVALUSERVARS_NAME
# Outputs:
#   - configuration desired, stdout
#	- error messages, stdout
#######################################
output_conf () {
	# parameter values expected from jenkins env 
	if [ -z "$ISO_FILE" ]; then
		echo "${PROGRAM_NAME}: ISO_FILE not defined in jenkins env!"
		exit 1
	elif [ -z "$PACKER_BUILDER" ]; then
		echo "${PROGRAM_NAME}: PACKER_BUILDER not defined in jenkins env!"
		exit 1
	fi

	case "$ISO_FILE" in
		#"ubuntu-16.04-server-amd64")   ... *specfic --> generic (can be deteremined by some form of pattern matching)*
		"ubuntu-20.04.1-legacy-server-amd64.iso")			OS_BUILD_CONF_NAME="ubuntu_preseed.cfg"
															SHELL_PROVISIONER_NAME="shell-provisioner-apt-get"
															PACKER_BUILD_TEMPLATE_NAME="ubuntu_preseed_build.json"
															PACKER_BUILD_EVALUSERVARS_NAME="evaluservars"
															OS_CHOICE="$UBUNTU"
															;;
		# ubuntu versions 19.xx and below
		"ubuntu-"[1][1-9]"."*|"ubuntu-"[1-9]"."*)			OS_BUILD_CONF_NAME="ubuntu_preseed.cfg"
															SHELL_PROVISIONER_NAME="shell-provisioner-apt-get"
															PACKER_BUILD_TEMPLATE_NAME="ubuntu_preseed_build.json"
															PACKER_BUILD_EVALUSERVARS_NAME="evaluservars"
															OS_CHOICE="$UBUNTU"
															;;
		"debian"*)											OS_BUILD_CONF_NAME="debian_preseed.cfg"
															SHELL_PROVISIONER_NAME="shell-provisioner-apt-get"
															PACKER_BUILD_TEMPLATE_NAME="debian_preseed_build.json"
															PACKER_BUILD_EVALUSERVARS_NAME="evaluservars"
															OS_CHOICE="$DEBIAN"
															;;
		*)         											echo "${PROGRAM_NAME}: build configurations not set for $ISO_FILE"
															exit 1
															;;
	esac

	case "$PACKER_BUILDER" in
		"virtualbox-iso")	case "$OS_CHOICE" in
								"$UBUNTU")		GUEST_OS_TYPE="Ubuntu_64"
												;;
								"$DEBIAN")		GUEST_OS_TYPE="Debian_64"
												;;
								*)				echo "${PROGRAM_NAME}: unable to set guest os type $OS_CHOICE for $PACKER_BUILDER"
												exit 1
												;;
							esac
							;;
		*)         			echo "${PROGRAM_NAME}: unknown packer builder (at least to me! The script!) $PACKER_BUILDER"
							exit 1
							;;
	esac

	case "$OUTPUT_CONF" in
	"osconf")			echo "$OS_BUILD_CONF_NAME"
						;;
	"provisioner")		echo "$SHELL_PROVISIONER_NAME"
						;;
	"template")    		echo "$PACKER_BUILD_TEMPLATE_NAME"
						;;
	"evaluservars") 	echo "$PACKER_BUILD_EVALUSERVARS_NAME"
						;;
	"guest_os_type")	echo "$GUEST_OS_TYPE"
						;;
	*)    				echo "${PROGRAM_NAME}: invalid configuration to output -- $OUTPUT_CONF"
						exit 1
						;;
	esac 
}

#######################################
# Not a function at the moment, but can be considered
# the main of the program.
#######################################
set -e
PROGRAM_NAME="$(basename "$0")"
# Define enum type.
HYPERVISOR_GUEST_OS_CHOICES=(
	UBUNTU
	DEBIAN
)
# initialize enums with values
count=${#HYPERVISOR_GUEST_OS_CHOICES[@]}
for ((i=0; i < count; i++)); do
    name=${HYPERVISOR_GUEST_OS_CHOICES[$i]}
    declare -r "${name}"="$i"
done

unset name
while getopts "ho:" opt; do
	case "$opt" in
	# NOTES:
	# -o helps determine which packerbuild configuration to output
	# this should NOT be mandatory for now, as its possible this script can be used else where in jenkins (at least for project packerbuilds)
	# specifying -o without an argument will pass in ':' for 'opt'
	"o")    OUTPUT_CONF=$OPTARG
			output_conf
			exit 0
			;;
	"h")	usage
			exit 0
			;;
	":")    echo "${PROGRAM_NAME}: an argument is required for -- $OPTARG"
			exit 1
			;;
    *)		exit 1
			;;
    esac
done

if [ -z "$name" ]; then
	usage
	exit 1
fi
