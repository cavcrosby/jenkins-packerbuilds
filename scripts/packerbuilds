#!/bin/bash
#
# Main build step should run this script when constructing
# a 'packerbuilds' build.

#######################################
# Checks to see if env vars that are passed
# in are defined in the global environment.
# Globals:
#	PROGRAM_NAME
#   BUILD_TYPE
# Arguments:
#   $n: env vars to check to see if defined (and contain some value)
# Outputs:
#   - Writes var_name not being defined in env to stderr
# Returns:
#   0 - all env vars passed in are defined
#   1 - at least one env var passed in is not defined
#######################################
# credits go to:
# https://stackoverflow.com/questions/29278743/how-to-check-if-multiple-variables-are-defined-or-not-in-bash#answer-65396324
_checkvars() {
    # ndefined ==> not defined
    local var_ndefined=false
    for var_name in "$@"; do
        if [ -z "${!var_name}" ]; then
            if [ "${var_name}" = "SHELL_PROVISIONER" ] && [ "${BUILD_TYPE}" = "project" ]; then
                # NOTE(cavcrosby): it is assumed that project builds will have hard coded
                # their shell provisioners
                continue
            fi
            echo "${PROGRAM_NAME}: ${var_name} is not defined" >&2
            var_ndefined=true
        fi
    done
    # for reference on why just 'if [ ${var_ndefined} ];...' is a bad idea:
    # https://stackoverflow.com/questions/2953646/how-can-i-declare-and-use-boolean-variables-in-a-shell-script#answer-21210966
    if [ "${var_ndefined}" = true ]; then
        return 1
    fi
    return 0
}

#######################################
# Main build script for the 'jenkins-packerbuilds' project.
# Globals:
#   WORKSPACE                           (from Jenkins env)
#   OS_BUILD_CONFS_BRANCH               (from .env)
#   SHELL_PROVISIONERS_BRANCH           (from .env)
#   SHELL_PROCESSORS_BRANCH             (from .env)
#   PACKER_TEMPLATES_BRANCH             (from .env)
#   SHELL_PROVISIONERS_CONFIG_FILE      (from .env)
#   PROJECT_SCRIPTS_DIR_PATH            (from .env)
#   PACKER_EXE_PATH                     (from .env)
#   ISO_IMAGES_PATH                     (from .env)
#   PACKER_HTTP_DIR                     (from .env)
#   PACKER_SHELL_PROVISIONERS_DIR       (from .env)
#   SHELL_PREPROCESSOR                  (from Jenkins parameters)
#   BUILD_TYPE                          (from Jenkins parameters)
#   PROJECT                             (from Jenkins parameters)
#   OPERATING_SYSTEM                    (from Jenkins parameters)
#   OPERATING_SYSTEM_VERSION            (from Jenkins parameters)
#   GUEST_OS_TYPE                       (from Jenkins parameters)
#   ISO_FILE                            (from Jenkins parameters)
#   PACKER_BUILDER                      (from Jenkins parameters)
#   OS_BUILD_CONF                       (from Jenkins parameters)
#   PACKER_TEMPLATE                     (from Jenkins parameters)
#   SHELL_PROVISIONER                   (from Jenkins parameters)
#   OTHER_BUILD_NAME_CRITERIA           (from Jenkins parameters)
#   RECORD_BUILDENV_VARS                (from Jenkins parameters)
#   DRY_RUN                             (from Jenkins parameters)
# Outputs:
#   - Writes bare command line interface to stdout
#   - Writes jq not being found in the PATH to stderr
#   - Writes git not being found in the PATH to stderr
#   - Writes packer executable does not exist at PACKER_EXE_PATH to stderr
#   - Writes shell function was not ran in the Jenkins job workspace dir to stderr
#   - Writes shell preprocessor was specified but does not exist to stderr
#   - "packer" command output to stdout/stderr
#   - "git" command output to stdout/stderr
# Returns:
#   - 0: build success
#   - 1: jq not being found in the PATH
#   - 1: git not being found in the PATH
#   - 1: packer executable does not exist at PACKER_EXE_PATH
#   - 1: shell function was not ran in the Jenkins job workspace dir
#   - 1: shell preprocessor was specified but does not exist
#   - 1: could not cd into packer build root dir
#   - 1: not all env vars were supplied
#######################################
packerbuilds() {
    # constants
    local PROGRAM_NAME
    readonly PROGRAM_NAME="packerbuilds"
    # repo urls
    local OS_BUILD_CONFS_REPO_URL
    readonly OS_BUILD_CONFS_REPO_URL="https://github.com/cavcrosby/os-build-confs"

    local SHELL_PROVISIONERS_REPO_URL
    readonly SHELL_PROVISIONERS_REPO_URL="https://github.com/cavcrosby/packer-shell-provisioners"
    
    local SHELL_PROCESSORS_REPO_URL
    readonly SHELL_PROCESSORS_REPO_URL="https://github.com/cavcrosby/packer-shell-processors"

    local PACKER_TEMPLATES_REPO_URL
    readonly PACKER_TEMPLATES_REPO_URL="https://github.com/cavcrosby/packer-templates"
    # these are the minimum env vars needed to use the project's packer templates
    local ENV_VAR_NAMES_NEEDED=(
        "OS_BUILD_CONF"
        "PACKER_TEMPLATE"
        "SHELL_PROVISIONER"
    )
    # repo names
    local os_build_confs_repo_name
    os_build_confs_repo_name="$(basename "${OS_BUILD_CONFS_REPO_URL}")"

    local shell_provisioners_repo_name
    shell_provisioners_repo_name="$(basename "${SHELL_PROVISIONERS_REPO_URL}")"
    
    local shell_processors_repo_name
    shell_processors_repo_name="$(basename "${SHELL_PROCESSORS_REPO_URL}")"

    local packer_templates_repo_name
    packer_templates_repo_name="$(basename "${PACKER_TEMPLATES_REPO_URL}")"
    local packerbuilds_conf_path="${PWD}/packerbuilds.conf"

    # after this point we can assume PWD = WORKSPACE
    if [ "${PWD}" != "${WORKSPACE}" ]; then
        echo "${PROGRAM_NAME}: was not ran in the Jenkins job workspace dir" >&2
        return 1
    elif [ -z "$(command -v git)" ]; then
        echo "${PROGRAM_NAME}: git cannot be found in the PATH!" >&2
        return 1
    elif [ -z "$(command -v jq)" ]; then
        echo "${PROGRAM_NAME}: jq cannot be found in the PATH!" >&2
        return 1
    elif [ -z "$(command -v "${PACKER_EXE_PATH}")" ]; then
        echo "${PROGRAM_NAME}: ${PACKER_EXE_PATH} does not exist" >&2
        return 1
    # we don't want to run packer unless we know we have everything we need
    elif ! _checkvars "${ENV_VAR_NAMES_NEEDED[@]}"; then
        return 1
    # NOTE(cavcrosby): this is to encourage the notion that this will not have
    # a fully functional CLI (e.g. ./PROGRAM_NAME -f foo -b bar)
    elif [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
        cat << _EOF_
Usage: ${PROGRAM_NAME}

This program does not plan on having a functional command line interface (CLI).

_EOF_
        return 0
    fi

    if [ -d "${os_build_confs_repo_name}" ]; then
        rm --recursive --force "${os_build_confs_repo_name}"
    fi
    git clone --branch "${OS_BUILD_CONFS_BRANCH}" "${OS_BUILD_CONFS_REPO_URL}" "${os_build_confs_repo_name}"

    if [ -d "${shell_provisioners_repo_name}" ]; then
        rm --recursive --force "${shell_provisioners_repo_name}"
    fi
    git clone --branch "${SHELL_PROVISIONERS_BRANCH}" "${SHELL_PROVISIONERS_REPO_URL}" "${shell_provisioners_repo_name}"
    
    if [ -d "${shell_processors_repo_name}" ]; then
        rm --recursive --force "${shell_processors_repo_name}"
    fi
    git clone --branch "${SHELL_PROCESSORS_BRANCH}" "${SHELL_PROCESSORS_REPO_URL}" "${shell_processors_repo_name}"

    if [ -d "${packer_templates_repo_name}" ]; then
        rm --recursive --force "${packer_templates_repo_name}"
    fi
    git clone --branch "${PACKER_TEMPLATES_BRANCH}" "${PACKER_TEMPLATES_REPO_URL}" "${packer_templates_repo_name}"
    
    # NOTES(cavcrosby): some OS versions contain the dot character in them (usually
    # more than one). To be used as the default hostname for the VM, those will
    # need to be replaced. If it was not clear, build_name is used as the
    # VM name/hostname.
    local build_name
    build_name="${PACKER_BUILDER}"-"${OPERATING_SYSTEM}"-"$(tr '.' '-' <<< "${OPERATING_SYSTEM_VERSION}")"
    if [ -n "${OTHER_BUILD_NAME_CRITERIA}" ]; then
        build_name="${build_name}-${OTHER_BUILD_NAME_CRITERIA}"
    fi
    if [ -d "${build_name}" ]; then
        rm --recursive --force "${build_name}"
    fi

    # NOTES(cavcrosby): these vars might get used in the future, if I intend on
    # identifying ISO files or checking by their checksums. Would have to
    # manage/fetch official checksums from sources.
    local iso_checksum iso_filename
    read -r iso_checksum sha_iso_filename <<< "$(sha256sum "${ISO_IMAGES_PATH}/${ISO_FILE}")"

    local packer_build_root_path="${PWD}/${build_name}"
    local packer_build_http_path="${packer_build_root_path}/${PACKER_HTTP_DIR}"
    local packer_build_shell_provisioners_path="${packer_build_root_path}/${PACKER_SHELL_PROVISIONERS_DIR}"
    mkdir --parents "${packer_build_http_path}"
    mkdir --parents "${packer_build_shell_provisioners_path}"

    # Create a packerbuilds dir that will serve files over http and allocate
    # further configurations via shell provisioners.
    # NOTE(cavcrosby): ensure builder(s) in packer templates can use 'HTTP' as 
    # a configuration option
    cp "${PROJECT_SCRIPTS_DIR_PATH}/${PACKER_EVALUSERVARS_NAME}" "${packer_build_root_path}"
    cp "${PWD}/${packer_templates_repo_name}/${PACKER_TEMPLATE}" "${packer_build_root_path}"
    cp "${PWD}/${os_build_confs_repo_name}/${OS_BUILD_CONF}" "${packer_build_http_path}"
    cp "${PWD}/${shell_provisioners_repo_name}/${SHELL_PROVISIONERS_CONFIG_FILE}" "${packer_build_http_path}"
    cp "${packerbuilds_conf_path}" "${packer_build_http_path}"

    # NOTES(cavcrosby): with the creation of the notion that there can be
    # basic/project (e.g. and others) VM builds. Project builds differentiate in
    # that the shell provisioners can be numerous. Thus, packerbuilds should be
    # able to aknowledge this and move over the numerous shell provisioners
    # as needed.
    if [ "${BUILD_TYPE}" = "project" ]; then
        # grabs each provisioner's script from the script/scripts element
        # pscript_name ==> provisioner script name
        for pscript_name in $(jq < "${PWD}/${packer_templates_repo_name}/${PACKER_TEMPLATE}" \
            --raw-output '.["provisioners"][] | .script // .["scripts"][]' | xargs basename --multiple); do
            cp "${PWD}/${shell_provisioners_repo_name}/${pscript_name}" "${packer_build_shell_provisioners_path}"
        done
    else
        cp "${PWD}/${shell_provisioners_repo_name}/${SHELL_PROVISIONER}" "${packer_build_shell_provisioners_path}"
    fi

    # NOTES(cavcrosby): packer supports the notion of local shell post processing and
    # provisioning (this occurs after the VM boots, regardless whether the
    # shell code runs on the VM or not) on the local machine but not before
    # processing the packer template. This is in attempt to create the idea
    # of shell preprocessing.
    # shellcheck disable=1090
    if [ -n "${SHELL_PREPROCESSOR}" ]; then
        if [ -f "${PWD}/${shell_processors_repo_name}/${SHELL_PREPROCESSOR}" ]; then
            . "${PWD}/${shell_processors_repo_name}/${SHELL_PREPROCESSOR}"
        else
            "${PROGRAM_NAME}: shell preprocessor was specified but does not exist in ${shell_processors_repo_name}" >&2
            return 1
        fi
    fi

    # any code from here is running inside the packer build dir
    cd "${packer_build_root_path}" || return 1

    # shellcheck disable=1090
    # NOTES(cavcrosby): packer templates will have placeholders in them. These
    # will be evaluated based on env vars in the current env.
    . "${PWD}/${PACKER_EVALUSERVARS_NAME}"
    "${PACKER_EVALUSERVARS_NAME}"

    # record env vars into a file ==> packerbuilds_conf_path
    if [ -n "${RECORD_BUILDENV_VARS}" ]; then
        read -r -a ENV_VAR_NAME_ARR <<< "${RECORD_BUILDENV_VARS}"
        for env_var in "${ENV_VAR_NAME_ARR[@]}"; do
            echo "${env_var}: ${!env_var}" >> "${PWD}/$(basename "${packerbuilds_conf_path}")"
        done
    fi

    if [ -z "${DRY_RUN}" ]; then
        "${PACKER_EXE_PATH}" build -only "${PACKER_BUILDER}" "${PACKER_TEMPLATE}"
    fi

    return 0
}
