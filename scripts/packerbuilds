#!/bin/bash
#
# Main build step should run this script when constructing
# a 'packerbuilds' build.

#######################################
# Main build script for 'packerbuilds' project
# that is hosted on a jenkins instance.
# Globals:
#   WORKSPACE                           (pre-defined)
#   OS_BUILD_CONFS_BRANCH               (from .env)
#   SHELL_PROVISIONERS_BRANCH           (from .env)
#   PACKER_BUILD_TEMPLATES_BRANCH       (from .env)
#   PACKER_EXE                          (from .env)
#   ISO_IMAGES_PATH                     (from .env)
#   PROJECT_SCRIPTS_DIRECTORY           (from .env)
#   PROJECT_BUILDCONFS_DIRECTORY        (from .env)
#   PACKER_HTTP_DIR_NAME                (from .env)
#   PACKER_SHELL_PROVISIONERS_DIR_NAME  (from .env)
#   OPERATING_SYSTEM                    (from jenkin parameters)
#   OPERATING_SYSTEM_VERSION            (from jenkin parameters)
#   ISO_FILE                            (from jenkin parameters)
#   PACKER_BUILDER                      (from jenkin parameters)
#   OTHER_PACKERBUILD_NAME_CRITERIA     (from jenkin parameters)
#   RECORD_BUILDENV_VARS                (from jenkin parameters)
#   DRY_RUN                             (from jenkin parameters)
#   OS_BUILD_CONF_NAME                  (from jenkin parameters/this script)
#   PACKER_BUILD_TEMPLATE_NAME          (from jenkin parameters/this script)
#   PACKER_BUILD_EVALUSERVARS_NAME      (from jenkin parameters/this script)
#   SHELL_PROVISIONER_NAME              (from jenkin parameters/this script)
# Outputs:
#   - git commands output to stdout/stderr
#   - unix command output to stdout/stderr
#   - packer output to stdout/stderr
#######################################
packerbuilds () {
    # it's assumed jenkins will call bash with flags -xe
    cd "$WORKSPACE" || return 1
    PACKERBUILDS_CONF_PATH="${PROJECT_BUILDCONFS_DIRECTORY}/packerbuilds.conf"
    PACKERBUILDS_UTIL_PATH="${PROJECT_SCRIPTS_DIRECTORY}/packerbuilds-util"

    OS_BUILD_CONFS_REPO_URL="https://github.com/reap2sow1/os-build-confs"
    SHELL_PROVISIONERS_REPO_URL="https://github.com/reap2sow1/packer-build-shell-provisioners"
    PACKER_BUILD_TEMPLATES_REPO_URL="https://github.com/reap2sow1/packer-build-templates"
    OS_BUILD_CONFS_REPO_NAME="$(basename "$OS_BUILD_CONFS_REPO_URL")"
    SHELL_PROVISIONERS_REPO_NAME="$(basename "$SHELL_PROVISIONERS_REPO_URL")"
    PACKER_BUILD_TEMPLATES_REPO_NAME="$(basename "$PACKER_BUILD_TEMPLATES_REPO_URL")"

    if [ -d "$OS_BUILD_CONFS_REPO_NAME" ]; then
        rm --recursive --force "$OS_BUILD_CONFS_REPO_NAME"
    fi
    git clone --branch "$OS_BUILD_CONFS_BRANCH" "$OS_BUILD_CONFS_REPO_URL" "$OS_BUILD_CONFS_REPO_NAME"
    if [ -d "$SHELL_PROVISIONERS_REPO_NAME" ]; then
        rm --recursive --force "$SHELL_PROVISIONERS_REPO_NAME"
    fi
    git clone --branch "$SHELL_PROVISIONERS_BRANCH" "$SHELL_PROVISIONERS_REPO_URL" "$SHELL_PROVISIONERS_REPO_NAME"
    if [ -d "$PACKER_BUILD_TEMPLATES_REPO_NAME" ]; then
        rm --recursive --force "$PACKER_BUILD_TEMPLATES_REPO_NAME"
    fi
    git clone --branch "$PACKER_BUILD_TEMPLATES_BRANCH" "$PACKER_BUILD_TEMPLATES_REPO_URL" "$PACKER_BUILD_TEMPLATES_REPO_NAME"
    
    # NOTE: some OS versions contain the dot character in them (usually more than one)
    # to be used as the default hostname for the vm, those will need to be replaced
    PACKERBUILDS_BUILD_NAME=${PACKER_BUILDER}-${OPERATING_SYSTEM}-"$(tr '.' '-' <<< "${OPERATING_SYSTEM_VERSION}")"
    if [ -n "$OTHER_PACKERBUILD_NAME_CRITERIA" ]; then
        PACKERBUILDS_BUILD_NAME="${PACKERBUILDS_BUILD_NAME}-${OTHER_PACKERBUILD_NAME_CRITERIA}"
    fi
    if [ -d "$PACKERBUILDS_BUILD_NAME" ]; then
        rm --recursive --force "$PACKERBUILDS_BUILD_NAME"
    fi
    GUEST_OS_TYPE="$("${PACKERBUILDS_UTIL_PATH}" -o guest_os_type)"
    if [ -z "$OS_BUILD_CONF_NAME" ]; then
        OS_BUILD_CONF_NAME="$("${PACKERBUILDS_UTIL_PATH}" -o osconf)"
    fi
    if [ -z "$PACKER_BUILD_TEMPLATE_NAME" ]; then
        PACKER_BUILD_TEMPLATE_NAME="$("${PACKERBUILDS_UTIL_PATH}" -o template)"
    fi
    if [ -z "$PACKER_BUILD_EVALUSERVARS_NAME" ]; then
        PACKER_BUILD_EVALUSERVARS_NAME="$("${PACKERBUILDS_UTIL_PATH}" -o evaluservars)"
    fi
    if [ -z "$SHELL_PROVISIONER_NAME" ]; then
        SHELL_PROVISIONER_NAME="$("${PACKERBUILDS_UTIL_PATH}" -o provisioner)"
    fi
    read -r ISO_CHECKSUM IGNORE <<< "$(sha256sum "${ISO_IMAGES_PATH}/${ISO_FILE}")" # output from sha256sum: hash iso_filename

    PACKER_HTTP_PATH="${WORKSPACE}/${PACKERBUILDS_BUILD_NAME}/${PACKER_HTTP_DIR_NAME}"
    PACKER_SHELL_PROVISIONER_PATH="${WORKSPACE}/${PACKERBUILDS_BUILD_NAME}/${PACKER_SHELL_PROVISIONERS_DIR_NAME}"
    PACKER_BUILD_ROOT_PATH="${WORKSPACE}/${PACKERBUILDS_BUILD_NAME}"
    mkdir --parents "$PACKER_HTTP_PATH"
    mkdir --parents "$PACKER_SHELL_PROVISIONER_PATH"

    cp "${WORKSPACE}/${OS_BUILD_CONFS_REPO_NAME}/${OS_BUILD_CONF_NAME}" "$PACKER_HTTP_PATH"
    cp "${WORKSPACE}/${SHELL_PROVISIONERS_REPO_NAME}/${SHELL_PROVISIONER_NAME}" "$PACKER_SHELL_PROVISIONER_PATH"
    cp "${WORKSPACE}/${PACKER_BUILD_TEMPLATES_REPO_NAME}/${PACKER_BUILD_TEMPLATE_NAME}" "$PACKER_BUILD_ROOT_PATH"
    cp "${WORKSPACE}/${PACKER_BUILD_TEMPLATES_REPO_NAME}/${PACKER_BUILD_EVALUSERVARS_NAME}" "$PACKER_BUILD_ROOT_PATH"
    cp "$PACKERBUILDS_CONF_PATH" "$PACKER_HTTP_PATH"

    cd "$PACKER_BUILD_ROOT_PATH" || return 1
    # shellcheck disable=1090
    source "$PACKER_BUILD_EVALUSERVARS_NAME"
    "$PACKER_BUILD_EVALUSERVARS_NAME"

    if [ -n "$RECORD_BUILDENV_VARS" ]; then
        read -r -a ENV_VAR_NAME_ARR <<< "$RECORD_BUILDENV_VARS"
        for env_var in "${ENV_VAR_NAME_ARR[@]}"; do
            echo "$env_var: ${!env_var}" >> "${PACKER_HTTP_PATH}/$(basename "${PACKERBUILDS_CONF_PATH}")"
        done
    fi

    if [ -z "$DRY_RUN" ]; then
        "$PACKER_EXE" build -only "$PACKER_BUILDER" "$PACKER_BUILD_TEMPLATE_NAME"
    fi
    return 0
}
